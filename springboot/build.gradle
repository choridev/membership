plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
    id 'org.sonarqube' version '6.1.0.5360'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

jacoco {
	toolVersion = '0.8.13'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'com.google.code.gson:gson:2.8.9'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true // Apply test coverage
            element = 'CLASS' // Test coverage unit

            // Line coverage
            // Test coverage must be greater than 90%
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

			// Maximum number of lines in a file
			limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 500
            }

			// Branch coverage
			// Test coverage must be greater than 90%
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }
    }

	// Classes exclued from the result report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                            '**/SpringbootApplication.class'
                    ])
        }))
    }
}

sonar {
    properties {
        property 'sonar.projectKey', 'choridev_membership'
        property 'sonar.organization', 'choridev'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
    }
}
